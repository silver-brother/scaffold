// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0

package model

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.getUserByIdStmt, err = db.PrepareContext(ctx, getUserById); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserById: %w", err)
	}
	if q.getUserByIdCardStmt, err = db.PrepareContext(ctx, getUserByIdCard); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByIdCard: %w", err)
	}
	if q.insertUserStmt, err = db.PrepareContext(ctx, insertUser); err != nil {
		return nil, fmt.Errorf("error preparing query InsertUser: %w", err)
	}
	if q.listUserAccessLogByPaginationStmt, err = db.PrepareContext(ctx, listUserAccessLogByPagination); err != nil {
		return nil, fmt.Errorf("error preparing query ListUserAccessLogByPagination: %w", err)
	}
	if q.listUserByIdsStmt, err = db.PrepareContext(ctx, listUserByIds); err != nil {
		return nil, fmt.Errorf("error preparing query ListUserByIds: %w", err)
	}
	if q.listUserByPaginationStmt, err = db.PrepareContext(ctx, listUserByPagination); err != nil {
		return nil, fmt.Errorf("error preparing query ListUserByPagination: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.getUserByIdStmt != nil {
		if cerr := q.getUserByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIdStmt: %w", cerr)
		}
	}
	if q.getUserByIdCardStmt != nil {
		if cerr := q.getUserByIdCardStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIdCardStmt: %w", cerr)
		}
	}
	if q.insertUserStmt != nil {
		if cerr := q.insertUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertUserStmt: %w", cerr)
		}
	}
	if q.listUserAccessLogByPaginationStmt != nil {
		if cerr := q.listUserAccessLogByPaginationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUserAccessLogByPaginationStmt: %w", cerr)
		}
	}
	if q.listUserByIdsStmt != nil {
		if cerr := q.listUserByIdsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUserByIdsStmt: %w", cerr)
		}
	}
	if q.listUserByPaginationStmt != nil {
		if cerr := q.listUserByPaginationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUserByPaginationStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                DBTX
	tx                                *sql.Tx
	getUserByIdStmt                   *sql.Stmt
	getUserByIdCardStmt               *sql.Stmt
	insertUserStmt                    *sql.Stmt
	listUserAccessLogByPaginationStmt *sql.Stmt
	listUserByIdsStmt                 *sql.Stmt
	listUserByPaginationStmt          *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                tx,
		tx:                                tx,
		getUserByIdStmt:                   q.getUserByIdStmt,
		getUserByIdCardStmt:               q.getUserByIdCardStmt,
		insertUserStmt:                    q.insertUserStmt,
		listUserAccessLogByPaginationStmt: q.listUserAccessLogByPaginationStmt,
		listUserByIdsStmt:                 q.listUserByIdsStmt,
		listUserByPaginationStmt:          q.listUserByPaginationStmt,
	}
}
