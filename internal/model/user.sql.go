// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user.sql

package model

import (
	"context"
	"strings"
)

const getUserById = `-- name: GetUserById :one
select id, created_at, updated_at, deleted_at, name, sex, birth_date, id_card, mobile, avatar, description
from user
where id = ?
limit 1
`

func (q *Queries) GetUserById(ctx context.Context, id uint64) (*User, error) {
	row := q.queryRow(ctx, q.getUserByIdStmt, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.Sex,
		&i.BirthDate,
		&i.IDCard,
		&i.Mobile,
		&i.Avatar,
		&i.Description,
	)
	return &i, err
}

const getUserByIdCard = `-- name: GetUserByIdCard :one
select id, created_at, updated_at, deleted_at, name, sex, birth_date, id_card, mobile, avatar, description
from user
where id_card = ?
`

func (q *Queries) GetUserByIdCard(ctx context.Context, idCard string) (*User, error) {
	row := q.queryRow(ctx, q.getUserByIdCardStmt, getUserByIdCard, idCard)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.Sex,
		&i.BirthDate,
		&i.IDCard,
		&i.Mobile,
		&i.Avatar,
		&i.Description,
	)
	return &i, err
}

const insertUser = `-- name: InsertUser :exec
insert into user (name, sex, birth_date, id_card, mobile, avatar, description)
values (?, ?, ?, ?, ?, ?, ?)
`

type InsertUserParams struct {
	Name        string  `json:"name"`
	Sex         UserSex `json:"sex"`
	BirthDate   string  `json:"birth_date"`
	IDCard      string  `json:"id_card"`
	Mobile      string  `json:"mobile"`
	Avatar      string  `json:"avatar"`
	Description string  `json:"description"`
}

func (q *Queries) InsertUser(ctx context.Context, arg *InsertUserParams) error {
	_, err := q.exec(ctx, q.insertUserStmt, insertUser,
		arg.Name,
		arg.Sex,
		arg.BirthDate,
		arg.IDCard,
		arg.Mobile,
		arg.Avatar,
		arg.Description,
	)
	return err
}

const listUserByIds = `-- name: ListUserByIds :many
select id, created_at, updated_at, deleted_at, name, sex, birth_date, id_card, mobile, avatar, description
from user
where id in (/*SLICE:ids*/?)
`

func (q *Queries) ListUserByIds(ctx context.Context, ids []uint64) ([]*User, error) {
	query := listUserByIds
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.query(ctx, nil, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Name,
			&i.Sex,
			&i.BirthDate,
			&i.IDCard,
			&i.Mobile,
			&i.Avatar,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserByPagination = `-- name: ListUserByPagination :many
select id, created_at, updated_at, deleted_at, name, sex, birth_date, id_card, mobile, avatar, description
from user
where 1
limit ? offset ?
`

type ListUserByPaginationParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUserByPagination(ctx context.Context, arg *ListUserByPaginationParams) ([]*User, error) {
	rows, err := q.query(ctx, q.listUserByPaginationStmt, listUserByPagination, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Name,
			&i.Sex,
			&i.BirthDate,
			&i.IDCard,
			&i.Mobile,
			&i.Avatar,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
